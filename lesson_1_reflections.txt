How did viewing a diff between two versions of a file help you see the bug that
was introduced?

    By showing all code changes from a previously working version

How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

    More easily backtrack from complex revisions and more easily pinpointing
    exact changes you want to review or undo

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

    Manually: control breakpoints/milestones more easily, but must remember to
    commit often enough that specific logical changes don't get lost among a large
    batch of changes; automatically: no worry about forgetting to saving changes,
    but harder to consolidate multiple changes as a logical unit and may result
    in incomplete and unusable revisions

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

    Programming usually involves many related pieces of code across multiple files
    that must be added or changed together for proper functionality, not usually
    the case with word documents

How can you use the commands git log and git diff to view the history of files?

    git log provides a timeline of commented changes to easily find a specific version
    of the code. git diff lets you see the specific lines of code added, removed or
    changed in a commit to help isolate specific features or bugs.

How might using version control make you more confident to make changes that
could break something?

    Newer or experimental code can be tried out while an older/working version is always
    available for reference and regression

Now that you have your workspace set up, what do you want to try using Git for?

    Project 2: Resume
